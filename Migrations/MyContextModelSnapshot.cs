// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheWall_cSharp;

namespace TheWall_cSharp.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TheWall_cSharp.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("MessageId");

                    b.Property<int>("RegUserId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("CommentId");

                    b.HasIndex("MessageId");

                    b.HasIndex("RegUserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TheWall_cSharp.Models.CommentLike", b =>
                {
                    b.Property<int>("CommentLikeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CommentId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("RegUserId");

                    b.Property<DateTime>("UpdateAt");

                    b.HasKey("CommentLikeId");

                    b.HasIndex("CommentId");

                    b.HasIndex("RegUserId");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("TheWall_cSharp.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("RegUserId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("MessageId");

                    b.HasIndex("RegUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TheWall_cSharp.Models.MessageLike", b =>
                {
                    b.Property<int>("MessageLikeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("MessageId");

                    b.Property<int>("RegUserId");

                    b.Property<DateTime>("UpdateAt");

                    b.HasKey("MessageLikeId");

                    b.HasIndex("MessageId");

                    b.HasIndex("RegUserId");

                    b.ToTable("MessageLikes");
                });

            modelBuilder.Entity("TheWall_cSharp.Models.RegUser", b =>
                {
                    b.Property<int>("RegUserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FName")
                        .IsRequired();

                    b.Property<string>("LName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("RegUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TheWall_cSharp.Models.Comment", b =>
                {
                    b.HasOne("TheWall_cSharp.Models.Message", "MessageCommentedOn")
                        .WithMany("CommentsOnMessage")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheWall_cSharp.Models.RegUser", "CommentCreator")
                        .WithMany("CommentsPosted")
                        .HasForeignKey("RegUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheWall_cSharp.Models.CommentLike", b =>
                {
                    b.HasOne("TheWall_cSharp.Models.Comment", "CommentLiked")
                        .WithMany("UsersWhoLikedThisComment")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheWall_cSharp.Models.RegUser", "CommentLiker")
                        .WithMany("CommentsLiked")
                        .HasForeignKey("RegUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheWall_cSharp.Models.Message", b =>
                {
                    b.HasOne("TheWall_cSharp.Models.RegUser", "MessageCreator")
                        .WithMany("MessagesPosted")
                        .HasForeignKey("RegUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheWall_cSharp.Models.MessageLike", b =>
                {
                    b.HasOne("TheWall_cSharp.Models.Message", "MessageLiked")
                        .WithMany("UsersWhoLikedThisMessage")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheWall_cSharp.Models.RegUser", "MessageLiker")
                        .WithMany("MessagesLiked")
                        .HasForeignKey("RegUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
